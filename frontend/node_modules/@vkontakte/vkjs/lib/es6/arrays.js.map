{"version":3,"file":"arrays.js","names":["uniqueArrayFallback","sumArray","array","Array","isArray","length","reduce","previous","current","averageArray","uniqueArray","Set","from","shuffleArray","map","a","Math","random","sort","b","chunkArray","size","head","slice","tail","omitFromArray","value","index","indexOf","difference","array1","array2","res","item","push"],"sources":["../../src/arrays.ts"],"sourcesContent":["import { uniqueArrayFallback } from './internal/uniqueArray';\n\n/**\n * Вычисляет сумму элементов массива\n */\nexport function sumArray(array: number[]): number {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return array.reduce((previous, current) => current + previous);\n}\n\n/**\n * Находит среднее арифметическое элементов массива\n */\nexport function averageArray(array: number[]): number {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return sumArray(array) / array.length;\n}\n\n/**\n * Возвращает новый массив с уникальными элементами\n */\nexport function uniqueArray<T>(array: T[]): T[] {\n  if (!Array.isArray(array) || !array.length) {\n    return [];\n  }\n\n  if (typeof Set !== 'undefined') {\n    return Array.from(new Set(array));\n  }\n\n  return uniqueArrayFallback(array);\n}\n\n/**\n * Перемешивает исходный массив и возвращает новый\n */\nexport function shuffleArray<T>(array: T[]): T[] {\n  return array\n    .map<[number, T]>((a) => [Math.random(), a])\n    .sort((a, b) => a[0] - b[0])\n    .map<T>((a) => a[1]);\n}\n\n/**\n * Разбивает массив на чанки\n */\nexport function chunkArray<T>(array: T[], size: number): T[][] {\n  if (!Array.isArray(array) || !array.length) {\n    return [];\n  }\n\n  if (!size) {\n    return [array];\n  }\n\n  const head = array.slice(0, size);\n  const tail = array.slice(size);\n\n  return [head, ...chunkArray(tail, size)];\n}\n\n/**\n * Удаляет из массива элемент по значению.\n * Если элемент был удалён – возвращает новый массив.\n *\n * @example\n *\n * omitFromArray([1, 2, 3], 3) // [1, 2]\n * omitFromArray([1, 2, 3], 5) // [1, 2, 3]\n */\nexport function omitFromArray<T>(array: T[] = [], value: T): T[] {\n  const index = array.indexOf(value);\n\n  if (index < 0) {\n    return array;\n  } else {\n    return [...array.slice(0, index), ...array.slice(index + 1)];\n  }\n}\n\n/**\n * Возвращает разницу между двумя массивами.\n * Вернёт элементы, которых не хватает во втором массиве.\n *\n * @example\n *\n * difference([1, 2, 3], [1, 2, 3]) // []\n * difference([1, 2, 3], [1]) // [2, 3]\n * difference([1, 2, 3], [1, 10, 100]) // [2, 3]\n */\nexport function difference<T>(array1: T[] = [], array2: T[] = []) {\n  return array1.reduce<T[]>((res, item) => {\n    if (array2.indexOf(item) < 0) {\n      res.push(item);\n    }\n    return res;\n  }, []);\n}\n"],"mappings":"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"}