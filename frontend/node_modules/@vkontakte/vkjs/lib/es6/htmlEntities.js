import _typeof from "@babel/runtime/helpers/typeof";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
/* eslint-disable @typescript-eslint/quotes */
import { fromCodePoint, getCodePointAt, numericUnicodeMap } from './lib/codepoints';
var escapeMap = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  "'": '&#39;',
  '"': '&quot;'
};
var unescapeMap = {
  '&amp;': '&',
  '&#38;': '&',
  '&lt;': '<',
  '&#60;': '<',
  '&gt;': '>',
  '&#62;': '>',
  '&apos;': "'",
  '&#39;': "'",
  '&quot;': '"',
  '&#34;': '"'
};
var namedEntities = [['&amp;', '&'], ['&lt;', '<'], ['&gt;', '>'], ['&quot;', '"'], ['&apos;', "'"]];
var ESCAPE_REGEX = /[&<>'"]/g;

/**
 * Safely escape HTML entities such as `&`, `<`, `>`, `"`, and `'`
 * @param {string} input
 */
export function escape(input) {
  if (input == null) {
    return '';
  }
  return input.replace(ESCAPE_REGEX, function (entity) {
    return escapeMap[entity];
  });
}
var UNESCAPE_REGEX = /&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34);/g;

/**
 * Unescape HTML entities such as `&`, `<`, `>`, `"`, and `'`
 * @param {string} input
 */
export function unescape(input) {
  if (input == null) {
    return '';
  }
  return input.replace(UNESCAPE_REGEX, function (entity) {
    return unescapeMap[entity];
  });
}
export var outOfBoundsChar = String.fromCharCode(65533);
var ENCODE_REGEX = /(?:[<>'"&\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g;
export function encodeHTMLEntities(input) {
  if (input == null) {
    return '';
  }
  return input.replace(ENCODE_REGEX, function (entity) {
    var code = entity.length > 1 ? getCodePointAt(entity, 0) : entity.charCodeAt(0);
    return '&#' + String(code) + ';';
  });
}
var DECODE_REGEX = /&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);/g;
export function decodeHTMLEntities(input) {
  if (input == null) {
    return '';
  }
  input = namedEntities.reduce(function (result, _ref) {
    var _ref2 = _slicedToArray(_ref, 2),
      mask = _ref2[0],
      _char = _ref2[1];
    return result.replace(new RegExp(mask, 'ig'), _char);
  }, input);
  return input.replace(DECODE_REGEX, function (entity) {
    if (entity[0] === '&' && entity[1] === '#') {
      var secondChar = entity[2];
      var code = secondChar === 'x' || secondChar === 'X' ? parseInt(entity.substr(3), 16) : parseInt(entity.substr(2));
      if (code >= 0x10ffff) {
        return outOfBoundsChar;
      }
      if (code > 65535) {
        return fromCodePoint(code);
      }
      return String.fromCharCode(numericUnicodeMap[code] || code);
    }
    return entity;
  });
}
export function decodeHTMLEntitiesDeep(input) {
  if (typeof input === 'string') {
    return decodeHTMLEntities(input);
  }
  if (_typeof(input) === 'object') {
    var correctType = Object.prototype.toString.apply(input);
    if (correctType === '[object Array]') {
      return input.map(function (item) {
        return decodeHTMLEntitiesDeep(item);
      });
    }
    if (correctType === '[object Object]') {
      var response = {};
      Object.keys(input).forEach(function (item) {
        response[decodeHTMLEntities(item)] = decodeHTMLEntitiesDeep(input[item]);
      });
      return response;
    }
  }
  return input;
}
//# sourceMappingURL=htmlEntities.js.map